/* *********************************************************************
 * This code was generated by a tool.
 * graphql-server-types@<%= PACKAGE_VERSION %>
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 ***********************************************************************/

import { Context, Info } from './context';
import { CustomScalar } from './scalars';

export type ArgsObject = { [key: string]: any };
export type EmptyArgs = { [key: string]: never };

export type Resolver<ReturnType, Args extends ArgsObject = EmptyArgs> = (
  args: Args,
  context: Context,
  info: Info,
) => ReturnType | Promise<ReturnType>;

export type Field<
  ReturnType,
  Args extends ArgsObject = EmptyArgs
> = Args extends EmptyArgs
  ? ReturnType | Resolver<ReturnType, Args>
  : Resolver<ReturnType, Args>;

export interface ComplexType {
  id: Field<string>;
  value: Field<string | null>;
}

export enum CustomEnum {
  FISRT = 'FISRT',
  SECOND = 'SECOND',
  THIRD = 'THIRD',
}

export interface ComplexInputType {
  id: string;
  value: string | null;
}

export interface TypeWithProps {
  id: Field<string | null>;
  str: Field<string | null>;
  int: Field<number | null>;
  float: Field<number | null>;
  bool: Field<boolean | null>;
  enumeration: Field<CustomEnum | null>;
  complex: Field<ComplexType | null>;
  scalar: Field<CustomScalar | null>;
  date: Field<Date | null>;
}

export interface TypeWithVariousNullability {
  nullable: Field<string | null>;
  nonNullable: Field<string>;
  nullableListWithNullableElements: Field<(string | null)[] | null>;
  nonNullableListWithNullableElements: Field<(string | null)[]>;
  nullableListWithNonNullableElements: Field<string[] | null>;
  nonNullableListWithNonNullableElements: Field<string[]>;
}

export interface TypeWithInputs {
  scalar: Field<
    string | null,
    { scalarInput: string | null; complexParam: ComplexInputType | null }
  >;
  complex: Field<ComplexType | null>;
}

export type UnionType = ComplexType | TypeWithProps;

export interface InterfaceType {
  id: Field<string>;
  value: Field<number | null>;
}

export interface TypeImplementingInterface extends InterfaceType {
  id: Field<string>;
  value: Field<number | null>;
  localProp: Field<string | null>;
}

export interface AnotherInterfaceType {
  anotherProp: Field<string | null>;
}

export interface TypeImplementingMultipleInterfaces
  extends InterfaceType,
    AnotherInterfaceType {
  id: Field<string>;
  value: Field<number | null>;
  anotherProp: Field<string | null>;
  localProp: Field<string | null>;
}

export interface TypeWithDeprecatedDirective {
  /** @deprecated */
  deprecatedField: Field<string | null>;

  /** @deprecated Its no good */
  deprecatedFieldWithReason: Field<string | null>;

  /**
   * Single-line comment
   * @deprecated
   */
  deprecatedFieldWithComment: Field<string | null>;

  /**
   * Single-line comment
   * @deprecated Its no good
   */
  deprecatedFieldWithReasonAndComment: Field<string | null>;

  /**
   * Multi-line
   * comment
   * @deprecated
   */
  deprecatedFieldWithMultilineComment: Field<string | null>;

  /**
   * Multi-line
   * comment
   * @deprecated Its no good
   */
  deprecatedFieldWithReasonAndMultilineComment: Field<string | null>;
}

/** This is a type with a description */
export interface TypeWithDescription {
  /** This is a property with a description */
  id: Field<string>;

  /** This is another property with a description */
  value: Field<
    string | null,
    {
      /** This a scalar input param with a description */
      scalarParam: string | null;

      /** This a complex input param with a description */
      complexParam: ComplexInputType | null;
    }
  >;
}

/** This is an input type with a description */
export interface InputTypeWithDescription {
  /** This is an input property with a description */
  id: string;

  /** This is an input property with a description */
  value: string | null;
}

/**
 * This is a type with
 * a multi-line description
 */
export interface TypeWithMultilineDescription {
  /**
   * This is a field with
   * a multi-line description
   */
  field: Field<string | null>;
}

/** This is an union type with a description */
export type UnionTypeWithDescription = ComplexType | TypeWithProps;

/** This is an enum type with a description */
export enum CustomEnumWithDescription {
  /** This is an enum value with a description */
  FISRT = 'FISRT',

  /** This is another enum value with a description */
  SECOND = 'SECOND',

  /**
   * This is a deprecated enum value
   * @deprecated Its bad
   */
  BAD_THING = 'BAD_THING',
}

/** Descriptions may contain ` backticks and \` escaped backticks */
export interface TypeWithDefaultValues {
  /** Descriptions may \ backslashes and \\ double backslashes */
  id: Field<string>;
  value: Field<string | null, { param: string | null }>;
  backtick: Field<string | null, { param: string | null }>;
  escapedBacktick: Field<string | null, { param: string | null }>;
}

export const source = `# Reference GraphQL schema: any syntax herein is supported

# Comments are not included in the generated output

type ComplexType {
  id: ID!
  value: String
}

enum CustomEnum {
  FISRT
  SECOND
  THIRD
}

input ComplexInputType {
  id: ID!
  value: String
}

scalar CustomScalar

# special case that will not be imported from ./scalars
scalar Date

type TypeWithProps {
  id: ID
  str: String
  int: Int
  float: Float
  bool: Boolean
  enumeration: CustomEnum
  complex: ComplexType
  scalar: CustomScalar
  date: Date
}

type TypeWithVariousNullability {
  nullable: String
  nonNullable: String!
  nullableListWithNullableElements: [String]
  nonNullableListWithNullableElements: [String]!
  nullableListWithNonNullableElements: [String!]
  nonNullableListWithNonNullableElements: [String!]!
}

type TypeWithInputs {
  scalar(scalarInput: String, complexParam: ComplexInputType): String
  complex: ComplexType
}

union UnionType = ComplexType | TypeWithProps

interface InterfaceType {
  id: ID!
  value: Int
}

type TypeImplementingInterface implements InterfaceType {
  id: ID!
  value: Int
  localProp: String
}

interface AnotherInterfaceType {
  anotherProp: String
}

type TypeImplementingMultipleInterfaces implements InterfaceType & AnotherInterfaceType {
  id: ID!
  value: Int
  anotherProp: String
  localProp: String
}

type TypeWithDeprecatedDirective {
  deprecatedField: String @deprecated
  deprecatedFieldWithReason: String @deprecated(reason: "Its no good")
  """
  Single-line comment
  """
  deprecatedFieldWithComment: String @deprecated
  """
  Single-line comment
  """
  deprecatedFieldWithReasonAndComment: String @deprecated(reason: "Its no good")
  """
  Multi-line
  comment
  """
  deprecatedFieldWithMultilineComment: String @deprecated
  """
  Multi-line
  comment
  """
  deprecatedFieldWithReasonAndMultilineComment: String
    @deprecated(reason: "Its no good")
}

"""
This is a type with a description
"""
type TypeWithDescription {
  """
  This is a property with a description
  """
  id: ID!
  """
  This is another property with a description
  """
  value(
    """
    This a scalar input param with a description
    """
    scalarParam: String
    """
    This a complex input param with a description
    """
    complexParam: ComplexInputType
  ): String
}

"""
This is an input type with a description
"""
input InputTypeWithDescription {
  """
  This is an input property with a description
  """
  id: ID!
  """
  This is an input property with a description
  """
  value: String
}

"""
This is a type with
a multi-line description
"""
type TypeWithMultilineDescription {
  """
  This is a field with
  a multi-line description
  """
  field: String
}

"""
This is an union type with a description
"""
union UnionTypeWithDescription = ComplexType | TypeWithProps
"""
This is an enum type with a description
"""
enum CustomEnumWithDescription {
  """
  This is an enum value with a description
  """
  FISRT
  """
  This is another enum value with a description
  """
  SECOND
  """
  This is a deprecated enum value
  """
  BAD_THING @deprecated(reason: "Its bad")
}

# The following features are allowed, but do not affect the generated output
directive @customOperationDirective on QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @customSchemaDirective on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

# Comments may contain backticks \`

"""
Descriptions may contain \` backticks and \\\` escaped backticks
"""
type TypeWithDefaultValues {
  """
  Descriptions may \\ backslashes and \\\\ double backslashes
  """
  id: ID! @customSchemaDirective
  value(param: String = "Some Value"): String # Typescript types/interfaces do not support default values
  backtick(
    param: String = "Default value containg a \` backtick character"
  ): String # Backticks are correctly escaped
  escapedBacktick(
    param: String = "Default values with \\\\\` escaped backtick characters must include a double backslash"
  ): String # Backticks are correctly escaped
}
`;
